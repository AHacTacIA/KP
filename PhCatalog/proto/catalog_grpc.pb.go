// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: catalog.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PharmacyCatalogClient is the client API for PharmacyCatalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PharmacyCatalogClient interface {
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Modify(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Find(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Drug, error)
	All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DrugList, error)
}

type pharmacyCatalogClient struct {
	cc grpc.ClientConnInterface
}

func NewPharmacyCatalogClient(cc grpc.ClientConnInterface) PharmacyCatalogClient {
	return &pharmacyCatalogClient{cc}
}

func (c *pharmacyCatalogClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyCatalogClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyCatalogClient) Modify(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyCatalogClient) Find(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Drug, error) {
	out := new(Drug)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyCatalogClient) All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DrugList, error) {
	out := new(DrugList)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PharmacyCatalogServer is the server API for PharmacyCatalog service.
// All implementations must embed UnimplementedPharmacyCatalogServer
// for forward compatibility
type PharmacyCatalogServer interface {
	Add(context.Context, *Request) (*Response, error)
	Delete(context.Context, *Request) (*Response, error)
	Modify(context.Context, *Request) (*Response, error)
	Find(context.Context, *Request) (*Drug, error)
	All(context.Context, *Empty) (*DrugList, error)
	mustEmbedUnimplementedPharmacyCatalogServer()
}

// UnimplementedPharmacyCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedPharmacyCatalogServer struct {
}

func (UnimplementedPharmacyCatalogServer) Add(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPharmacyCatalogServer) Delete(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPharmacyCatalogServer) Modify(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedPharmacyCatalogServer) Find(context.Context, *Request) (*Drug, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedPharmacyCatalogServer) All(context.Context, *Empty) (*DrugList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedPharmacyCatalogServer) mustEmbedUnimplementedPharmacyCatalogServer() {}

// UnsafePharmacyCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PharmacyCatalogServer will
// result in compilation errors.
type UnsafePharmacyCatalogServer interface {
	mustEmbedUnimplementedPharmacyCatalogServer()
}

func RegisterPharmacyCatalogServer(s grpc.ServiceRegistrar, srv PharmacyCatalogServer) {
	s.RegisterService(&PharmacyCatalog_ServiceDesc, srv)
}

func _PharmacyCatalog_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).Add(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyCatalog_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyCatalog_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).Modify(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyCatalog_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).Find(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyCatalog_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).All(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PharmacyCatalog_ServiceDesc is the grpc.ServiceDesc for PharmacyCatalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PharmacyCatalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.PharmacyCatalog",
	HandlerType: (*PharmacyCatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _PharmacyCatalog_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PharmacyCatalog_Delete_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _PharmacyCatalog_Modify_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _PharmacyCatalog_Find_Handler,
		},
		{
			MethodName: "All",
			Handler:    _PharmacyCatalog_All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog.proto",
}
